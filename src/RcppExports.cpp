// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArrayFire.h>
#include <Rcpp.h>

using namespace Rcpp;

// naive_bayes
void naive_bayes(RcppArrayFire::typed_array<f32> train_feats, RcppArrayFire::typed_array<f32> test_feats, RcppArrayFire::typed_array<s32> train_labels, RcppArrayFire::typed_array<s32> test_labels, int num_classes);
RcppExport SEXP _viewmaster_naive_bayes(SEXP train_featsSEXP, SEXP test_featsSEXP, SEXP train_labelsSEXP, SEXP test_labelsSEXP, SEXP num_classesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type train_feats(train_featsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type test_feats(test_featsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<s32> >::type train_labels(train_labelsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<s32> >::type test_labels(test_labelsSEXP);
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    naive_bayes(train_feats, test_feats, train_labels, test_labels, num_classes);
    return R_NilValue;
END_RCPP
}
// naive_bayes_demo
void naive_bayes_demo(int perc);
RcppExport SEXP _viewmaster_naive_bayes_demo(SEXP percSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type perc(percSEXP);
    naive_bayes_demo(perc);
    return R_NilValue;
END_RCPP
}
// test_backends
int test_backends();
RcppExport SEXP _viewmaster_test_backends() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(test_backends());
    return rcpp_result_gen;
END_RCPP
}
// af_nn
int af_nn(RcppArrayFire::typed_array<f32> train_feats, RcppArrayFire::typed_array<f32> test_feats, RcppArrayFire::typed_array<s32> train_target, RcppArrayFire::typed_array<s32> test_target, int num_classes, int device, std::string dts, float learning_rate, int max_epochs, int batch_size, float max_error, bool verbose);
RcppExport SEXP _viewmaster_af_nn(SEXP train_featsSEXP, SEXP test_featsSEXP, SEXP train_targetSEXP, SEXP test_targetSEXP, SEXP num_classesSEXP, SEXP deviceSEXP, SEXP dtsSEXP, SEXP learning_rateSEXP, SEXP max_epochsSEXP, SEXP batch_sizeSEXP, SEXP max_errorSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type train_feats(train_featsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<f32> >::type test_feats(test_featsSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<s32> >::type train_target(train_targetSEXP);
    Rcpp::traits::input_parameter< RcppArrayFire::typed_array<s32> >::type test_target(test_targetSEXP);
    Rcpp::traits::input_parameter< int >::type num_classes(num_classesSEXP);
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< std::string >::type dts(dtsSEXP);
    Rcpp::traits::input_parameter< float >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< int >::type max_epochs(max_epochsSEXP);
    Rcpp::traits::input_parameter< int >::type batch_size(batch_sizeSEXP);
    Rcpp::traits::input_parameter< float >::type max_error(max_errorSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(af_nn(train_feats, test_feats, train_target, test_target, num_classes, device, dts, learning_rate, max_epochs, batch_size, max_error, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ann_demo
int ann_demo(int device, int perc, std::string dts);
RcppExport SEXP _viewmaster_ann_demo(SEXP deviceSEXP, SEXP percSEXP, SEXP dtsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type device(deviceSEXP);
    Rcpp::traits::input_parameter< int >::type perc(percSEXP);
    Rcpp::traits::input_parameter< std::string >::type dts(dtsSEXP);
    rcpp_result_gen = Rcpp::wrap(ann_demo(device, perc, dts));
    return rcpp_result_gen;
END_RCPP
}
// ann
int ann();
RcppExport SEXP _viewmaster_ann() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ann());
    return rcpp_result_gen;
END_RCPP
}
// computeSparseRowVariances
Rcpp::NumericVector computeSparseRowVariances(IntegerVector j, NumericVector val, NumericVector rm, int n);
RcppExport SEXP _viewmaster_computeSparseRowVariances(SEXP jSEXP, SEXP valSEXP, SEXP rmSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type j(jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rm(rmSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSparseRowVariances(j, val, rm, n));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_viewmaster_naive_bayes", (DL_FUNC) &_viewmaster_naive_bayes, 5},
    {"_viewmaster_naive_bayes_demo", (DL_FUNC) &_viewmaster_naive_bayes_demo, 1},
    {"_viewmaster_test_backends", (DL_FUNC) &_viewmaster_test_backends, 0},
    {"_viewmaster_af_nn", (DL_FUNC) &_viewmaster_af_nn, 12},
    {"_viewmaster_ann_demo", (DL_FUNC) &_viewmaster_ann_demo, 3},
    {"_viewmaster_ann", (DL_FUNC) &_viewmaster_ann, 0},
    {"_viewmaster_computeSparseRowVariances", (DL_FUNC) &_viewmaster_computeSparseRowVariances, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_viewmaster(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
